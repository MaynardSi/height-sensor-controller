namespace HeightSensor.Enums
{
    public static class ByteCommandEnum
    {
        #region Buffer Commands
        //Conditions
        public static readonly byte[] SetRecordingStartCondtionImmediate = new byte[] { 0x40, 0x02, 0x0C, 0xE0, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00 };
        public static readonly byte[] SetRecordingStartCondtionAlarmOff1 = new byte[] { 0x40, 0x02, 0x0C, 0xE0, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01 };

        public static readonly byte[] SetRecordingTriggerChannelToA = new byte[] { 0x40, 0x02, 0x0C, 0xE0, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00 };
        //TODO : Change Set recording IP to automatic
        public static readonly byte[] SetRecordingIP = new byte[] { 0x40, 0x02, 0x00, 0x70, 0x00, 0x04 };  // IP Address 169.254.48.193
        //TODO : Change Set recording port to Set
        public static readonly byte[] SetRecordingPort = new byte[] { 0x40, 0x02, 0x00, 0x74, 0x00, 0x04, 0x00, 0x00, 0x13, 0x90 }; // Port 5008.
        //TODO : Change Set recording port to automatic
        public static readonly byte[] SetRecordingInterval = new byte[] { 0x40, 0x02, 0x00, 0x78, 0x00, 0x04, 0x00, 0x00, 0x00, 0x02 };

        public static readonly byte[] StartReadStorageData = new byte[] { 0x40, 0x02, 0x0C, 0xF8, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01 };
        public static readonly byte[] StopReadStorageData = new byte[] { 0x40, 0x02, 0x0C, 0xF8, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00 };
        #endregion

        #region Continous Data Commands
        //TODO : Change Set data push IP to automatic
        public static readonly byte[] SetDataPushIP = new byte[] { 0x40, 0x02, 0x10, 0xE4, 0x00, 0x04 };
        //TODO : Change Set data push port to Set
        public static readonly byte[] SetDataPushPort = new byte[] { 0x40, 0x02, 0x10, 0xE0, 0x00, 0x08, 0x00, 0x00, 0x13, 0x92, 0x00, 0x00 };
        public static readonly byte[] SetDataPushChannelToA = new byte[] { 0x40, 0x02, 0x0C, 0xE0, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00 };
        public static readonly byte[] SetDataPushOff = new byte[] { 0x40, 0x02, 0x01, 0xE0, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00 };
        public static readonly byte[] SetDataPushOn = new byte[] { 0x40, 0x02, 0x01, 0xE0, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01 };
        #endregion

        #region Saving Buffer Commands
        public static readonly byte[] StartBufferRecord = new byte[] { 0x40, 0x02, 0x0C, 0xF0, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01 };
        public static readonly byte[] StopBufferRecord = new byte[] { 0x40, 0x02, 0x0C, 0xF0, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00 };
        #endregion

        #region Measurement
        public static readonly byte[] LaserOff = new byte[] { 0x40, 0x02, 0x0C, 0x98, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01 };
        public static readonly byte[] LaserOn = new byte[] { 0x40, 0x02, 0x0C, 0x98, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00 };
        public static readonly byte[] SingleMeasure = new byte[] { 0x30, 0x02, 0x0D, 0x60 };
        #endregion

        #region Prints
        public static readonly byte[] PrintFileSystemCapacity = new byte[] { 0x30, 0x02, 0x01, 0x14 };
        public static readonly byte[] PrintSystemFreeSpace = new byte[] { 0x30, 0x02, 0x01, 0x10 };
        public static readonly byte[] PrintRecordingState = new byte[] { 0x30, 0x06, 0x00, 0x00, 0x0C, 0xC8, 0x00, 0x00 };
        public static readonly byte[] PrintRecordingCount = new byte[] { 0x30, 0x02, 0x0C, 0xC4 };
        #endregion
    }
    public static class ByteResponseEnum
    {
        public static readonly byte[] SUCCESS = new byte[] { 0xC0, 0x00 };
        public static readonly byte[] COMMAND_ERROR = new byte[] { 0xE0, 0x02, 0x00, 0xE1 };
        public static readonly byte[] ADDRESS_ERROR = new byte[] { 0xE0, 0x02, 0x00, 0xE2 };
        public static readonly byte[] OVERFLOW_ERROR = new byte[] { 0xE0, 0x02, 0x00, 0xE9 };
    }
}
